version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: candles_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-candles_db}
      POSTGRES_USER: ${POSTGRES_USER:-candles_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-candles_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-candles_user} -d ${POSTGRES_DB:-candles_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - candles_network
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build: .
    container_name: candles_backend_prod
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://candles_user:candles_password@postgres:5432/candles_db}
      - API_KEY=${API_KEY:-your_secure_api_key_here}
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./app:/app/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - candles_network
    restart: unless-stopped

  # React Frontend
  frontend:
    build: ./frontend
    container_name: candles_frontend_prod
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - candles_network
    restart: unless-stopped

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: candles_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - candles_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: candles_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - candles_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  candles_network:
    driver: bridge 